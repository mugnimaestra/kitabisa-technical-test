{"version":3,"sources":["lib.js","components/SumComponent.js","components/MultiplyComponent.js","components/PrimeComponent.js","components/FibonacciComponent.js","App.js","serviceWorker.js","index.js"],"names":["sumNum","x","y","parseInt","multiplyNum","isPrime","n","q","Math","sqrt","i","SumComponentStyle","styled","div","SumComponent","firstInput","React","useRef","secondInput","useState","result","setResult","className","htmlFor","type","name","placeholder","ref","onChange","e","target","maxLength","value","length","slice","current","MultiplyComponentStyle","MultiplyComponent","PrimeComponentStyle","PrimeComponent","primeArr","number","push","findPrimeNum","map","num","index","FibonacciComponentStyle","FibonacciComponent","temp","a","b","fibonnaciArr","findFibonnaciNum","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c53f3cc2.chunk.js","sourcesContent":["export const sumNum = (x, y) => {\r\n  return parseInt(x) + parseInt(y);\r\n};\r\n\r\nexport const multiplyNum = (x, y) => {\r\n  return parseInt(x) * parseInt(y);\r\n};\r\n\r\nconst isPrime = n => {\r\n  if (n < 2) return false;\r\n  const q = parseInt(Math.sqrt(n));\r\n  for (let i = 2; i <= q; i++) {\r\n    if (n % i === 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport const findPrimeNum = (n) => {\r\n  let primeArr = [];\r\n  let number = 1;\r\n  while (primeArr.length < n) {\r\n    if (isPrime(number)) {\r\n      primeArr.push(number);\r\n    }\r\n    number++;\r\n  }\r\n  return primeArr;\r\n}\r\n\r\nexport const findFibonnaciNum = n => {\r\n  let a = 0, b = 1, temp;\r\n  let fibonnaciArr = [];\r\n  while (fibonnaciArr.length < n) {\r\n    fibonnaciArr.push(a);\r\n    temp = a;\r\n    a = a + b;\r\n    b = temp;\r\n  }\r\n  return fibonnaciArr;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { sumNum } from '../lib';\r\n\r\nconst SumComponentStyle = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  text-align: left;\r\n  .input-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n    input {\r\n      margin: 0.25rem 0 1rem;\r\n    }\r\n  }\r\n  .text-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n  }\r\n  .wrapper {\r\n    display: flex;\r\n    margin: 0 -0.75rem;\r\n  }\r\n`;\r\n\r\nconst SumComponent = () => {\r\n  const firstInput = React.useRef();\r\n  const secondInput = React.useRef();\r\n  const [result, setResult] = React.useState(0);\r\n  const handleFirstInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (firstInput.current.value === '' || secondInput.current.value === '') {\r\n      return\r\n    }\r\n    setResult(sumNum(firstInput.current.value, secondInput.current.value));\r\n  }\r\n  const handleSecondInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (firstInput.current.value === \"\" || secondInput.current.value === \"\") {\r\n      return;\r\n    }\r\n    setResult(sumNum(firstInput.current.value, secondInput.current.value));\r\n  };\r\n  return (\r\n    <SumComponentStyle>\r\n      <h3>Sum X & Y, and print the result!</h3>\r\n      <div className=\"wrapper\">\r\n        <div className=\"input-container\">\r\n          <div>\r\n            <label htmlFor=\"firstInput\">First Input</label>\r\n            <input type=\"number\" name=\"firstInput\" placeholder=\"1, 3, 5 (max 7 digits)\" ref={firstInput} onChange={handleFirstInput} maxLength=\"7\" />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"firstInput\">Second Input</label>\r\n            <input type=\"number\" name=\"secondInput\" placeholder=\"1, 3, 5 (max 7 digits)\" ref={secondInput} onChange={handleSecondInput} maxLength=\"7\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"text-container\">\r\n          <div>Result:</div>\r\n          <span>{result}</span>\r\n        </div>\r\n      </div>\r\n\r\n    </SumComponentStyle>\r\n  );\r\n}\r\n\r\nexport default SumComponent;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { multiplyNum } from \"../lib\";\r\n\r\nconst MultiplyComponentStyle = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  text-align: left;\r\n  .input-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n    input {\r\n      margin: 0.25rem 0 1rem;\r\n    }\r\n  }\r\n  .text-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n  }\r\n  .wrapper {\r\n    display: flex;\r\n    margin: 0 -0.75rem;\r\n  }\r\n`;\r\n\r\nconst MultiplyComponent = () => {\r\n  const firstInput = React.useRef();\r\n  const secondInput = React.useRef();\r\n  const [result, setResult] = React.useState(0);\r\n  const handleFirstInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (firstInput.current.value === \"\" || secondInput.current.value === \"\") {\r\n      return;\r\n    }\r\n    setResult(multiplyNum(firstInput.current.value, secondInput.current.value));\r\n  };\r\n  const handleSecondInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (firstInput.current.value === \"\" || secondInput.current.value === \"\") {\r\n      return;\r\n    }\r\n    setResult(multiplyNum(firstInput.current.value, secondInput.current.value));\r\n  };\r\n  return (\r\n    <MultiplyComponentStyle>\r\n      <h3>Multiply X & Y, and print the result!</h3>\r\n      <div className=\"wrapper\">\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"firstInput\">First Input</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"firstInput\"\r\n            placeholder=\"1, 3, 5 (max: 7 digits)\"\r\n            ref={firstInput}\r\n            onChange={handleFirstInput}\r\n            maxLength=\"7\"\r\n          />\r\n          <label htmlFor=\"firstInput\">Second Input</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"secondInput\"\r\n            placeholder=\"1, 3, 5 (max: 7 digits)\"\r\n            ref={secondInput}\r\n            onChange={handleSecondInput}\r\n            maxLength=\"7\"\r\n          />\r\n        </div>\r\n        <div className=\"text-container\">\r\n          <div>Result:</div>\r\n          <span>{result}</span>\r\n        </div>\r\n      </div>\r\n    </MultiplyComponentStyle>\r\n  );\r\n};\r\n\r\nexport default MultiplyComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { findPrimeNum } from \"../lib\";\r\n\r\nconst PrimeComponentStyle = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  text-align: left;\r\n  .input-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n    input {\r\n      margin: 0.25rem 0 1rem;\r\n    }\r\n  }\r\n  .text-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n  }\r\n  .wrapper {\r\n    display: flex;\r\n    margin: 0 -0.75rem;\r\n  }\r\n`;\r\n\r\nconst PrimeComponent = () => {\r\n  const firstInput = React.useRef();\r\n  const [result, setResult] = React.useState([]);\r\n  const handleInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (e.target.value > 50) {\r\n      e.target.value = 50;\r\n    }\r\n    if (e.target.value < 0) {\r\n      e.target.value = 0;\r\n    }\r\n    if (firstInput.current.value === \"\") {\r\n      return;\r\n    }\r\n    setResult(findPrimeNum(firstInput.current.value));\r\n  };\r\n  return (\r\n    <PrimeComponentStyle>\r\n      <h3>Find first N prime number, and print the result!</h3>\r\n      <div className=\"wrapper\">\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"firstInput\">Input N Number</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"firstInput\"\r\n            placeholder=\"Positive number (max 50)\"\r\n            ref={firstInput}\r\n            onChange={handleInput}\r\n            maxLength=\"2\"\r\n          />\r\n        </div>\r\n        <div className=\"text-container\">\r\n          <div>Result:</div>\r\n          <span>\r\n          {result.length === 1 ? result : result.map((num, index) => <>{num}{result.length - 1 === index ? '' : ', '}</>)}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </PrimeComponentStyle>\r\n  );\r\n};\r\n\r\nexport default PrimeComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { findFibonnaciNum } from \"../lib\";\r\n\r\nconst FibonacciComponentStyle = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  text-align: left;\r\n  .input-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n    input {\r\n      margin: 0.25rem 0 1rem;\r\n    }\r\n  }\r\n  .text-container {\r\n    max-width: 50%;\r\n    padding: 0 0.75rem;\r\n  }\r\n  .wrapper {\r\n    display: flex;\r\n    margin: 0 -0.75rem;\r\n  }\r\n`;\r\n\r\nconst FibonacciComponent = () => {\r\n  const firstInput = React.useRef();\r\n  const [result, setResult] = React.useState([]);\r\n  const handleInput = (e) => {\r\n    if (e.target.maxLength) {\r\n      if (e.target.value.length > e.target.maxLength) {\r\n        e.target.value = e.target.value.slice(0, e.target.maxLength);\r\n      }\r\n    }\r\n    if (e.target.value > 50) {\r\n      e.target.value = 50;\r\n    }\r\n    if (e.target.value < 0) {\r\n      e.target.value = 0;\r\n    }\r\n    if (firstInput.current.value === \"\") {\r\n      return;\r\n    }\r\n    setResult(findFibonnaciNum(firstInput.current.value));\r\n  };\r\n  return (\r\n    <FibonacciComponentStyle>\r\n      <h3>Find the first N Fibonacci sequence, and print the result</h3>\r\n      <div className=\"wrapper\">\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"firstInput\">Input N Number</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"firstInput\"\r\n            placeholder=\"Positive number (max 50)\"\r\n            ref={firstInput}\r\n            onChange={handleInput}\r\n            maxLength=\"2\"\r\n          />\r\n        </div>\r\n        <div className=\"text-container\">\r\n          <div>Result:</div>\r\n          <span>\r\n            {result.length === 1\r\n              ? result\r\n              : result.map((num, index) => (\r\n                  <>\r\n                    {num}\r\n                    {result.length - 1 === index ? \"\" : \", \"}\r\n                  </>\r\n                ))}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </FibonacciComponentStyle>\r\n  );\r\n};\r\n\r\nexport default FibonacciComponent;\r\n","import React from 'react';\nimport './App.css';\nimport SumComponent from './components/SumComponent';\nimport MultiplyComponent from './components/MultiplyComponent';\nimport PrimeComponent from './components/PrimeComponent';\nimport FibonacciComponent from './components/FibonacciComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Kitabisa.com Technical Test</h1>\n      <SumComponent />\n      <MultiplyComponent />\n      <PrimeComponent />\n      <FibonacciComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}